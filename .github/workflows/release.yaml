name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          cd backend
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate release version
        id: release_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          # Remove -SNAPSHOT suffix
          RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $RELEASE_VERSION"

      - name: Calculate next snapshot version
        id: next_version
        run: |
          RELEASE_VERSION="${{ steps.release_version.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          # Parse version (assuming semantic versioning)
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on release type
          case $RELEASE_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next snapshot version: $NEXT_VERSION"

      # MOVED: Generate changelog BEFORE making any commits
      - name: Generate changelog
        id: changelog
        run: |
          # Find the most recent tag (or fallback to empty)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: $LAST_TAG"

          # Collect commit messages since last tag (excluding merge commits)
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log "$LAST_TAG"..HEAD --pretty=format:"- %s" --no-merges)
          fi

          # Handle empty changelog
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi

          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Set release version in pom.xml
        run: |
          cd backend
          mvn versions:set -DnewVersion=${{ steps.release_version.outputs.version }} -DgenerateBackupPoms=false

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build backend
        run: |
          cd backend
          mvn clean package -DskipTests

      - name: Run tests
        run: |
          cd backend
          mvn test

      - name: Commit release version
        run: |
          git add backend/pom.xml
          git commit -m "Release version ${{ steps.release_version.outputs.version }}"

      - name: Create release tag
        run: |
          git tag -a "v${{ steps.release_version.outputs.version }}" -m "Release version ${{ steps.release_version.outputs.version }}"

      - name: Set next snapshot version
        run: |
          cd backend
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.version }} -DgenerateBackupPoms=false

      - name: Commit next snapshot version
        run: |
          git add backend/pom.xml
          git commit -m "Prepare next development iteration: ${{ steps.next_version.outputs.version }}"

      - name: Push changes and tags
        run: |
          git push origin main
          git push origin "v${{ steps.release_version.outputs.version }}"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.release_version.outputs.version }}"
          name: "Release v${{ steps.release_version.outputs.version }}"
          body: |
            ## What's New in v${{ steps.release_version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}
            
            ---
            
            **Release Details:**
            - Released from snapshot version: ${{ steps.current_version.outputs.version }}
            - JAR file built and tested ✅
            - Frontend built and included ✅
          draft: false
          prerelease: false
          files: |
            backend/target/finance-tracker-${{ steps.release_version.outputs.version }}.jar